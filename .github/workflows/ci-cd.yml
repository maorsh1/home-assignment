name: CI/CD Pipeline

on:
  push:
    branches: [master]

env:
  IMAGE_NAME: hello-world
  DOCKER_REGISTRY: docker.io
  DOCKER_REPO: ${{ secrets.DOCKERHUB_USER }}/hello-world

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test --no-build --verbosity normal --logger trx --results-directory TestResults

      - name: Publish App
        run: dotnet publish -c Release -o out

      - name: Set Version from Git Tags
        id: set-version
        run: |
          VERSION=$(git describe --tags --always || echo "v0.0.1")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Git Version: ${VERSION}"

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_REPO:${{ needs.build.outputs.version }} .

      - name: Scan image with Trivy (Bonus)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $DOCKER_REPO:${{ needs.build.outputs.version }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Push Image
        run: |
          docker push $DOCKER_REPO:${{ needs.build.outputs.version }}

      - name: Run Container and Validate Output
        run: |
          OUTPUT=$(docker run --rm $DOCKER_REPO:${{ needs.build.outputs.version }})
          echo "Container Output: $OUTPUT"
          if [[ "$OUTPUT" != *"Hello World"* ]]; then
            echo "Unexpected output from container"
            exit 1
          fi

      - name: Print Version
        run: echo "Build version was: ${{ needs.build.outputs.version }}"
